{"version":3,"sources":["actions.js","api/api.js","constants.js","components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","components/ErrorBoundry.js","containers/App.js","serviceWorker.js","reducers.js","index.js"],"names":["requestRobots","dispatch","link","type","fetch","then","response","json","data","payload","catch","error","Card","name","email","id","className","alt","src","CardList","robots","map","user","i","key","SearchBox","searchfield","searchChange","placeholder","onChange","Scroll","props","style","overflow","border","height","children","ErrorBoundry","state","hasError","info","this","setState","Component","App","onRequestRobots","searchField","onSearchChange","isPending","filteredRobots","filter","robot","toLowerCase","includes","connect","searchRobots","event","target","value","Boolean","window","location","hostname","match","initialStateSearch","initialStateRobots","logger","createLogger","rootReducer","combineReducers","action","Object","assign","store","createStore","applyMiddleware","thunkMiddleware","navigator","addEventListener","serviceWorker","register","registration","console","log","scope","err","ReactDOM","render","document","getElementById","ready","unregister","message"],"mappings":"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","file":"static/js/main.2a70379d.chunk.js","sourcesContent":["import { apiCall } from './api/api'\r\nimport {\r\n  CHANGE_SEARCHFIELD,\r\n  REQUEST_ROBOTS_PENDING,\r\n  REQUEST_ROBOTS_SUCCESS,\r\n  REQUEST_ROBOTS_FAILED\r\n } from './constants'\r\n\r\n\r\nexport const setSearchField = (text) => ({ type: CHANGE_SEARCHFIELD, payload: text })\r\n\r\nexport const requestRobots = () => (dispatch) => {\r\n  dispatch({ type: REQUEST_ROBOTS_PENDING })\r\n  apiCall('https://jsonplaceholder.typicode.com/users')\r\n    .then(data => dispatch({ type: REQUEST_ROBOTS_SUCCESS, payload: data }))\r\n    .catch(error => dispatch({ type: REQUEST_ROBOTS_FAILED, payload: error }))\r\n}","export const apiCall = (link) =>\r\n  fetch(link).then(response => response.json())","export const CHANGE_SEARCHFIELD = 'CHANGE_SEARCHFIELD';\r\n\r\nexport const REQUEST_ROBOTS_PENDING = 'REQUEST_ROBOTS_PENDING';\r\nexport const REQUEST_ROBOTS_SUCCESS = 'REQUEST_ROBOTS_SUCCESS';\r\nexport const REQUEST_ROBOTS_FAILED = 'REQUEST_ROBOTS_FAILED';\r\n","import React from 'react';\r\n\r\nconst Card = ({ name, email, id}) => {\r\n\treturn(\r\n\t\t<div className='tc bg-light-green dib br pa3 ma2 grow bw2 shadow-5'>\r\n\t\t\t<img alt='robots' src={`https://robohash.org/${id}?200x200`} />\r\n\t\t\t<div>\r\n\t\t\t\t<h2> {name}</h2>\r\n\t\t\t\t<p>{email}</p>\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t\t);\r\n}\r\n\r\nexport default Card;","import React from 'react';\r\nimport Card from './Card';\r\n\r\nconst CardList = ( { robots }) => {\r\n\treturn (\r\n\t\t<div>\r\n\t\t\t{\r\n\t\t\t\trobots.map((user, i) => {\r\n\t\t\t\t\treturn (\r\n\t\t\t\t\t\t<Card \r\n\t\t\t\t\t\t\tkey={i} \r\n\t\t\t\t\t\t\tid={robots[i].id} \r\n\t\t\t\t\t\t\tname={robots[i].name} \r\n\t\t\t\t\t\t\temail={robots[i].email} \r\n\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t);\r\n\t\t\t\t\t})\r\n\t\t\t}\r\n\t\t</div>\r\n\t);\r\n}\r\n\r\nexport default CardList;","import React from 'react';\r\n\r\nconst SearchBox = ({ searchfield, searchChange }) => {\r\n\treturn (\r\n\t\t<div className='pa2'>\r\n\t\t\t<input\r\n\t\t\t\tclassName='pa3 ba b--green bg-lightest-blue'\r\n\t\t\t \ttype='search'\r\n\t\t\t \tplaceholder='search robots'\r\n\t\t\t \tonChange={searchChange}\r\n\t\t\t/>\r\n\t\t</div>\r\n\t);\r\n}\r\n\r\nexport default SearchBox;","import React from 'react';\r\n\r\nconst Scroll = (props) => {\r\n\treturn (\r\n\t\t<div style={{overflow: 'scroll', border: '1px solid black', height: '800px'}}>\r\n\t\t\t{props.children}\r\n\t\t</div>\r\n\t\t);\r\n\t};\r\n\r\nexport default Scroll;","import React, { Component } from 'react';\r\n\r\nclass ErrorBoundry extends Component {\r\n\tconstructor(props) {\r\n\t\tsuper(props);\r\n\t\tthis.state = {\r\n\t\t\thasError: false\r\n\t\t}\r\n\t}\r\n\r\ncomponentDidCatch(error, info){\r\n\tthis.setState({ hasError:true })\r\n}\r\n\r\n\t\trender(){\r\n\t\t\tif(this.state.hasError){\r\n\t\t\t\treturn <h1>Something went wrong.</h1>\r\n\t\t\t}\r\n\t\t\treturn this.props.children\r\n\t\t}\r\n}\r\n\r\nexport default ErrorBoundry;","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { setSearchField, requestRobots } from '../actions';\r\n\r\nimport CardList from '../components/CardList';\r\nimport SearchBox from '../components/SearchBox';\r\nimport Scroll from '../components/Scroll';\r\nimport ErrorBoundry from '../components/ErrorBoundry';\r\n\r\nimport './App.css';\r\n\r\nconst mapStateToProps = (state) => {\r\n\treturn {\r\n\t\tsearchField: state.searchRobots.searchField,\r\n\t\trobots: state.requestRobots.robots,\r\n\t\tisPending: state.requestRobots.isPending\r\n\t}\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n\treturn {\r\n\t\tonSearchChange: (event) => dispatch(setSearchField(event.target.value )),\r\n\t\tonRequestRobots: () => dispatch(requestRobots())\r\n\t}\r\n}\r\n\r\nclass App extends Component {\r\n  componentDidMount() {\r\n    this.props.onRequestRobots();\r\n  }\r\n\r\n  render() {\r\n    const { robots, searchField, onSearchChange, isPending } = this.props;\r\n    const filteredRobots = robots.filter(robot => {\r\n      return robot.name.toLowerCase().includes(searchField.toLowerCase());\r\n    })\r\n    return (\r\n      <div className='tc'>\r\n        <h1 className='f1'>RoboFriends</h1>\r\n        <SearchBox searchChange={onSearchChange}/>\r\n        <Scroll>\r\n          { isPending ? <h1>Loading</h1> :\r\n            <ErrorBoundry>\r\n              <CardList robots={filteredRobots} />\r\n            </ErrorBoundry>\r\n          }\r\n        </Scroll>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(App);","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import {\r\n  CHANGE_SEARCHFIELD,\r\n  REQUEST_ROBOTS_PENDING,\r\n  REQUEST_ROBOTS_SUCCESS,\r\n  REQUEST_ROBOTS_FAILED\r\n } from './constants';\r\n\r\nconst initialStateSearch = {\r\n\tsearchField: ''\r\n}\r\n\r\nexport const searchRobots = (state=initialStateSearch, action={}) => {\r\n\tswitch(action.type) {\r\n\t\tcase CHANGE_SEARCHFIELD:\r\n\t\t  return Object.assign({}, state, {searchField: action.payload});\r\n\t\t default:\r\n\t\t  return state;\r\n\t}\r\n}\r\n\r\nconst initialStateRobots = {\r\n\trobots: [],\r\n\tisPending: true\r\n}\r\n\r\nexport const requestRobots = (state=initialStateRobots, action={}) => {\r\n\tswitch(action.type) {\r\n\t\tcase REQUEST_ROBOTS_PENDING:\r\n\t\t  return Object.assign({}, state, { isPending: true})\r\n\t\tcase REQUEST_ROBOTS_SUCCESS:\r\n\t\t  return Object.assign({}, state, { robots: action.payload, isPending: false })\r\n\t\tcase REQUEST_ROBOTS_FAILED:\r\n\t\t  return Object.assign({}, state, { error: action.payload })\r\n\t\tdefault:\r\n\t\t  return state;\r\n\t}\r\n}\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { createStore, applyMiddleware, combineReducers } from 'redux';\nimport { createLogger } from 'redux-logger';\nimport thunkMiddleware from  'redux-thunk';\nimport './index.css';\nimport App from './containers/App';\nimport * as serviceWorker from './serviceWorker';\nimport { searchRobots, requestRobots } from './reducers';\nimport 'tachyons';\n\nconst logger = createLogger();\n\nconst rootReducer = combineReducers({ searchRobots, requestRobots})\nconst store = createStore(rootReducer, applyMiddleware(thunkMiddleware, logger))\n\nif ('serviceWorker' in navigator) {\n  window.addEventListener('load', function() {\n    navigator.serviceWorker.register('/sw.js').then(function(registration) {\n      // Registration was successful\n      console.log('ServiceWorker registration successful with scope: ', registration.scope);\n    }, function(err) {\n      // registration failed :(\n      console.log('ServiceWorker registration failed: ', err);\n    });\n  });\n}\n\nReactDOM.render(\n                <Provider store={store}>\n                 <App/> \n                </Provider>,\n                 document.getElementById('root'));\nserviceWorker.unregister();\n"],"sourceRoot":""}